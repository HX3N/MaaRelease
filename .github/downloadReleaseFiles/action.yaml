name: Download release files

description: Download release files

branding:
  icon: type
  color: purple

inputs:
  release_tag:
    description: the release tag
    required: true
  repo:
    description: the repo, "MaaAssistantArknights" or "MaaRelease"
    required: true
  os:
    description: Select the platforms for downloading the files. Option can be "windows", "linux", "macos", "macos-ota", or any combination of the three (separated by commas).
    required: true
  notTempDir:
    description: When set to "true", disables the use of temp dir to prevent potential failures in subsequent Docker actions.
    required: false
    default: "false"

runs:
  using: composite
  steps:
    - name: Download release files
      id: downloadReleaseFiles
      shell: bash
      env:
        TMPDIR: ${{ runner.temp }}
      run: |
        logDivider() {
          echo "-------------"
        }

        stat_mtime() {
          if [ "$(uname)" = "Darwin" ]; then
            stat -f "%Sm" -t "%Y-%m-%d %H:%M:%S" "$1"
          else
            stat -c "%y" "$1"
          fi
        }

        logDivider

        export DOWNLOAD_DIR="upload-dir/${{ inputs.repo }}"
        if [ "${{ inputs.notTempDir }}" != "true" ]; then
          export DOWNLOAD_DIR="${{ runner.temp }}/$DOWNLOAD_DIR"
        fi

        export DOWNLOAD_DIR_WITH_RELEASE_TAG="$DOWNLOAD_DIR/${{ inputs.release_tag }}"

        echo "DOWNLOAD_DIR=$DOWNLOAD_DIR" >> $GITHUB_OUTPUT
        echo "DOWNLOAD_DIR_WITH_RELEASE_TAG=$DOWNLOAD_DIR_WITH_RELEASE_TAG" >> $GITHUB_OUTPUT

        echo "dir: $DOWNLOAD_DIR"
        echo "dirWithReleaseTag: $DOWNLOAD_DIR_WITH_RELEASE_TAG"

        echo 'OS: ${{ inputs.os }}'
        export OSList=$(echo '${{ inputs.os }}' | tr ',' '\n')
        export PATTERN=""
        for OS in $OSList; do
            if [ "$OS" = "windows" ]; then
                export PATTERN="$PATTERN --pattern *-win-*"
            fi
            if [ "$OS" = "linux" ]; then
                export PATTERN="$PATTERN --pattern *-linux-*"
            fi
            if [ "$OS" = "macos" ]; then
                export PATTERN="$PATTERN --pattern *-macos-universal.dmg"
            fi
            if [ "$OS" = "macos-ota" ]; then
                export PATTERN="$PATTERN --pattern *-macos-universal.dmg --pattern *.delta --pattern appcast.xml"
            fi
            if [ "$OS" = "macos-runtime" ]; then
                export PATTERN="$PATTERN --pattern *-macos-runtime-universal.zip"
            fi
        done

        echo "pattern: $PATTERN"

        logDivider

        mkdir -pv $DOWNLOAD_DIR_WITH_RELEASE_TAG

        tmpfile=$(mktemp)

        echo "Start to download release files from ${{ inputs.repo }}..."

        if ! gh release download ${{ inputs.release_tag }} --repo "MaaAssistantArknights/${{ inputs.repo }}" $PATTERN --clobber --dir $DOWNLOAD_DIR_WITH_RELEASE_TAG 2>"$tmpfile"; then
          error=$(cat "$tmpfile")
          rm -f "$tmpfile"

          if [ "$error" = "release not found" ]; then
            echo "Release ${{ inputs.release_tag }} not found in ${{ inputs.repo }}, skipped."
            exit 0
          elif [ "$error" = "no assets match the file pattern" ]; then
            echo "Release ${{ inputs.release_tag }} in ${{ inputs.repo }} has no assets matching the file pattern, skipped."
            exit 0
          else
            echo "Error: $error"
            exit 1
          fi
        fi

        echo 'Download completed, fetching the "createdAt" attr...'

        created_at=$(gh release view ${{ inputs.release_tag }} --repo "MaaAssistantArknights/${{ inputs.repo }}" --json createdAt -q '.createdAt')

        echo "The release is created at $created_at, start to get the list of the release files ..." 

        list=$(gh release view ${{ inputs.release_tag }} --repo "MaaAssistantArknights/${{ inputs.repo }}" --json assets -q '.assets.[].name')

        echo 'Start to change the times of release files in the list...'

        echo "::group::download_release_files change the times of release files from MaaAssistantArknights/${{ inputs.repo }}."
        while IFS= read -r filename; do
          filenameWithPath="$DOWNLOAD_DIR_WITH_RELEASE_TAG/$filename"
          if [ -e "$filenameWithPath" ]; then
            echo "  Start to change the modify time of $filename from $(stat_mtime $filenameWithPath) to $created_at."
            touch -d "$created_at" "$filenameWithPath"
            echo "  The new modify time of $filename is $(stat_mtime $filenameWithPath)."
            printf "\n"
          fi
        done <<< "$list"
        echo "::endgroup::"

        echo Size:
        du -hs $DOWNLOAD_DIR_WITH_RELEASE_TAG

        echo 'Done.'

outputs:
  dir:
    description: dir for the release
    value: ${{ steps.downloadReleaseFiles.outputs.DOWNLOAD_DIR }}
  dirWithReleaseTag:
    description: dir for the release, with release tag
    value: ${{ steps.downloadReleaseFiles.outputs.DOWNLOAD_DIR_WITH_RELEASE_TAG }}
